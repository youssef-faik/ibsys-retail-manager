{
  "openapi": "3.0.1",
  "info": {
    "title": "IBSYS RETAIL MANAGER API",
    "description": "This API provides various endpoints to manage retail operations such as creating and updating products, managing inventory, and processing orders.",
    "version": "x.x.x"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Invoice",
      "description": "The Invoice API. Contains all the operations that can be performed on an invoice."
    },
    {
      "name": "Authentication",
      "description": "The Authentication API. Contains authentication end-point."
    },
    {
      "name": "Customer",
      "description": "The Customer API. Contains all the operations that can be performed on a customer"
    },
    {
      "name": "Product",
      "description": "The Product API. Contains all the operations that can be performed on a product"
    },
    {
      "name": "User",
      "description": "The User API. Contains all the operations that can be performed on a user. Requires ADMIN role."
    }
  ],
  "paths": {
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user details",
        "description": "Get the details of the given product id.",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user details",
        "description": "Update the details of the user with the given id.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user",
        "description": "Delete the user with the given id.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted user"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/users/change-password": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Change user password",
        "description": "Updates the user's password with a new one",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password successfully changed"
          },
          "400": {
            "description": "Invalid request body or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/products/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product details",
        "description": "Get the details of the product with the given id.",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the product to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update product details",
        "description": "Update the details of the product with given id.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the product to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete product",
        "description": "Delete a product with given id.",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the product to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted successfully.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad Request. Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/customers/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer details",
        "description": "Get the details of the customer with the given id.",
        "operationId": "getCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the customer to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update customer details",
        "description": "Update the details of the customer with given id.",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the customer to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete customer",
        "description": "Delete a customer with given id.",
        "operationId": "deleteCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the customer to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted customer"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "Get a list contains the details for all users.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successfully retrieved users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Users not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "Create a new user with the given details.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created user"
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all products",
        "description": "Get a list that contains the details for all products.",
        "operationId": "getAllProducts",
        "responses": {
          "200": {
            "description": "Successfully Retrieved the list of all products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create product",
        "description": "Create a new product with the given details.",
        "operationId": "createProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Product created successfully."
          },
          "400": {
            "description": "Bad Request. Invalid input parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. An error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/invoices": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get all invoices",
        "description": "Get a list that contains the details for all invoices.",
        "operationId": "getAllInvoices",
        "responses": {
          "200": {
            "description": "Successfully retrieved invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customers not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Create invoice",
        "description": "Create a new invoice with the supplied details.",
        "operationId": "createInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created invoice"
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/customers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get all customers",
        "description": "Get a list that contains the details for all customers.",
        "operationId": "getAllCustomers",
        "responses": {
          "200": {
            "description": "Successfully retrieved customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customers not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create customer",
        "description": "Create a new customer with the given details.",
        "operationId": "createCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created customer"
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate user",
        "description": "Allows users to authenticate and retrieve their JWT token.",
        "operationId": "authenticate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/invoices/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get invoice details",
        "description": "Get the details of the invoice with the given id.",
        "operationId": "getInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the invoice to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Authentication": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "title": "Error Response Schema",
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "string",
            "description": "The HTTP status code associated with the error.",
            "example": "400",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 EARLY_HINTS",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp when the error occurred.",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "The requested entity was not found."
          }
        },
        "description": "Represents the error response returned by the API."
      },
      "UserUpdateDto": {
        "title": "User Update Request Schema",
        "required": [
          "email",
          "firstName",
          "lastName",
          "role"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "First name of the user.",
            "example": "Said"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "Last name of the user.",
            "example": "Alami"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user.",
            "example": "said.alami@example.com"
          },
          "role": {
            "type": "string",
            "description": "Enumeration of user roles",
            "example": "MANAGER",
            "enum": [
              "ADMIN",
              "MANAGER",
              "CASHIER"
            ]
          }
        },
        "description": "Request body for updating an existing user."
      },
      "UserDto": {
        "title": "User Response Schema",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the user.",
            "format": "int32",
            "example": 2
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user.",
            "example": "Said"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user.",
            "example": "Alami"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user.",
            "example": "said.alami@example.com"
          },
          "role": {
            "type": "string",
            "description": "Enumeration of user roles",
            "example": "MANAGER",
            "enum": [
              "ADMIN",
              "MANAGER",
              "CASHIER"
            ]
          }
        },
        "description": "Response body for user details."
      },
      "ChangePasswordRequest": {
        "title": "Change Password Request Schema",
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string",
            "description": "The user's old password."
          },
          "newPassword": {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string",
            "description": "The user's new password."
          }
        },
        "description": "Request body for changing the password"
      },
      "ProductRequestDto": {
        "title": "Product Request Schema",
        "required": [
          "barCode",
          "name",
          "purchasePrice",
          "sellingPriceExcludingTax",
          "taxRate"
        ],
        "type": "object",
        "properties": {
          "barCode": {
            "type": "string",
            "description": "Barcode of the product",
            "example": "1234567890"
          },
          "name": {
            "maxLength": 1000,
            "minLength": 2,
            "type": "string",
            "description": "Name of the product",
            "example": "Laptop"
          },
          "sellingPriceExcludingTax": {
            "type": "number",
            "description": "Selling Price of the product excluding tax",
            "example": 12999.99
          },
          "purchasePrice": {
            "type": "number",
            "description": "Purchase Price of the product",
            "example": 10000.99
          },
          "taxRate": {
            "type": "string",
            "description": "Enumeration of tax rates",
            "example": "Ten",
            "enum": [
              "TWENTY",
              "FOURTEEN",
              "TEN",
              "SEVEN"
            ]
          }
        },
        "description": "Request body for creating/updating a product"
      },
      "ProductResponseDto": {
        "title": "Product Response Schema",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the product",
            "format": "int32",
            "example": 1
          },
          "barCode": {
            "type": "string",
            "description": "Barcode of the product",
            "example": "1234567890"
          },
          "name": {
            "type": "string",
            "description": "Name of the product",
            "example": "Laptop"
          },
          "sellingPriceExcludingTax": {
            "type": "number",
            "description": "Selling Price of the product excluding tax",
            "example": 12999.99
          },
          "purchasePrice": {
            "type": "number",
            "description": "Purchase Price of the product",
            "example": 10000.99
          },
          "taxRate": {
            "type": "string",
            "description": "Enumeration of tax rates",
            "example": "TEN",
            "enum": [
              "TWENTY",
              "FOURTEEN",
              "TEN",
              "SEVEN"
            ]
          }
        },
        "description": "Response body for retrieving a product"
      },
      "CustomerRequestDto": {
        "title": "Customer Request Schema",
        "required": [
          "address",
          "email",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string",
            "description": "Name of the customer",
            "example": "Rona SARL"
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer",
            "example": "rona-sarl@example.com"
          },
          "phone": {
            "maxLength": 10,
            "minLength": 10,
            "type": "string",
            "description": "Phone number of the customer",
            "example": "1234567890"
          },
          "address": {
            "maxLength": 500,
            "minLength": 10,
            "type": "string",
            "description": "Address of the customer",
            "example": "123 Main St, City, State, Zip"
          }
        },
        "description": "Request body for creating/updating a customer"
      },
      "CustomerResponseDto": {
        "title": "Customer Response Schema",
        "required": [
          "address",
          "email",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the customer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the customer",
            "example": "Rona SARL"
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer",
            "example": "rona-sarl@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the customer",
            "example": "1234567890"
          },
          "address": {
            "type": "string",
            "description": "Address of the customer",
            "example": "123 Main St, City, State, Zip"
          }
        },
        "description": "Response body for a customer response"
      },
      "UserCreateDto": {
        "title": "User Create Request Schema",
        "required": [
          "email",
          "firstName",
          "lastName",
          "password",
          "role"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "First name of the user.",
            "example": "Said"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "Last name of the user.",
            "example": "Alami"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user.",
            "example": "said.alami@example.com"
          },
          "password": {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string",
            "description": "Password of the user.",
            "example": "my-password"
          },
          "role": {
            "type": "string",
            "description": "Enumeration of user roles",
            "example": "MANAGER",
            "enum": [
              "ADMIN",
              "MANAGER",
              "CASHIER"
            ]
          }
        },
        "description": "Request body for creating a new user."
      },
      "InvoiceCreateDto": {
        "title": "Invoice Request Schema",
        "required": [
          "customerId",
          "items"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "integer",
            "description": "The ID of the customer who the invoice is issued to",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The list of items and their quantities to be included in the invoice",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            }
          }
        },
        "description": "Request body for creating an Invoice"
      },
      "InvoiceItemDto": {
        "title": "Invoice Item Schema",
        "required": [
          "productId",
          "quantity",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "description": "The ID of the product being invoiced",
            "format": "int32"
          },
          "quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "The quantity of the product being invoiced",
            "format": "int32"
          },
          "unitPrice": {
            "minimum": 1,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "The unit price of the product being invoiced"
          }
        },
        "description": "Represents an item included in an invoice"
      },
      "AuthenticationRequest": {
        "title": "Authentication Request Schema",
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "example": "yusef@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "secret-password"
          }
        },
        "description": "Request body for user authentication"
      },
      "AuthenticationResponse": {
        "title": "Authentication Response Schema",
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token",
            "example": "eyJhbGciOiJIUzI1NiJ9..."
          },
          "id": {
            "type": "integer",
            "description": "User ID",
            "format": "int64",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "Youssef"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "example": "Faik"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "example": "yusef@mail.com"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "example": "ADMIN"
          }
        },
        "description": "Response body for user authentication response"
      },
      "InvoiceDto": {
        "title": "Invoice Response Schema",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the invoice",
            "format": "int32"
          },
          "issueDate": {
            "type": "string",
            "description": "The date on which the invoice was issued",
            "format": "date"
          },
          "customerId": {
            "type": "integer",
            "description": "The ID of the customer who the invoice is issued to",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The list of items and their quantities included in the invoice",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemDto"
            }
          }
        },
        "description": "Response body for an invoice response"
      }
    },
    "securitySchemes": {
      "Bearer_Authentication": {
        "type": "http",
        "description": "A JWT token is required to access this API.\nJWT token can be obtained by providing email/password to the authentication API.",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
